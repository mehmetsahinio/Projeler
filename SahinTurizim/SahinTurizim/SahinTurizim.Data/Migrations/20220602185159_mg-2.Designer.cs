// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SahinTurizim.Data.Concrete.EfCore;

namespace SahinTurizim.Data.Migrations
{
    [DbContext(typeof(SahinTurizimContext))]
    [Migration("20220602185159_mg-2")]
    partial class mg2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.17");

            modelBuilder.Entity("BusRoute", b =>
                {
                    b.Property<int>("BusesBusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoutesRouteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("BusesBusId", "RoutesRouteId");

                    b.HasIndex("RoutesRouteId");

                    b.ToTable("BusRoute");
                });

            modelBuilder.Entity("SahinTurizim.Entity.Bus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BusBrand")
                        .HasColumnType("TEXT");

                    b.Property<string>("BusPNR")
                        .HasColumnType("TEXT");

                    b.Property<int>("BusSeatCapacity")
                        .HasColumnType("INTEGER");

                    b.HasKey("BusId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("SahinTurizim.Entity.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityAbout")
                        .HasColumnType("TEXT");

                    b.Property<string>("CityImage")
                        .HasColumnType("TEXT");

                    b.Property<string>("CityName")
                        .HasColumnType("TEXT");

                    b.Property<int>("CityNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("RouteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CityId");

                    b.HasIndex("RouteId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("SahinTurizim.Entity.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerSurname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SahinTurizim.Entity.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndTerminal")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstTerminal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hour")
                        .HasColumnType("TEXT");

                    b.Property<int>("Price")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecondTerminal")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThirdTerminal")
                        .HasColumnType("TEXT");

                    b.HasKey("RouteId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("SahinTurizim.Entity.Ticket", b =>
                {
                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeatNo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TicketId")
                        .HasColumnType("INTEGER");

                    b.HasKey("RouteId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RouteId")
                        .IsUnique();

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("BusRoute", b =>
                {
                    b.HasOne("SahinTurizim.Entity.Bus", null)
                        .WithMany()
                        .HasForeignKey("BusesBusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SahinTurizim.Entity.Route", null)
                        .WithMany()
                        .HasForeignKey("RoutesRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SahinTurizim.Entity.City", b =>
                {
                    b.HasOne("SahinTurizim.Entity.Route", null)
                        .WithMany("Cities")
                        .HasForeignKey("RouteId");
                });

            modelBuilder.Entity("SahinTurizim.Entity.Ticket", b =>
                {
                    b.HasOne("SahinTurizim.Entity.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SahinTurizim.Entity.Route", "Route")
                        .WithOne("TicketId")
                        .HasForeignKey("SahinTurizim.Entity.Ticket", "RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("SahinTurizim.Entity.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SahinTurizim.Entity.Route", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("TicketId");
                });
#pragma warning restore 612, 618
        }
    }
}
